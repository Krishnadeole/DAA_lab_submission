class Solution:
    def optimalSearchTree(self, keys, freq, n):
        dp = [[0 for _ in range(n)] for _ in range(n)]
        sum_freq = [[0 for _ in range(n)] for _ in range(n)]
        for i in range(n):
            sum_freq[i][i] = freq[i]
            for j in range(i + 1, n):
                sum_freq[i][j] = sum_freq[i][j - 1] + freq[j]
        for length in range(1, n + 1):
            for i in range(n - length + 1):
                j = i + length - 1
                dp[i][j] = float('inf')
                for r in range(i, j + 1):
                    cost = (dp[i][r - 1] if r > i else 0) + \
                           (dp[r + 1][j] if r < j else 0) + \
                           sum_freq[i][j]
                    dp[i][j] = min(dp[i][j], cost)

        return dp[0][n - 1]
